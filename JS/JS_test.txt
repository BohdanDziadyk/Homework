1)Chartype
Boolean
Number
String
Null
Undefined
NaN
Object
2)a)
3)forEach,map,find,filter,max,min
4)a)
5)function counter(){
	let x = 0;
	function inc()
	{
		x++;
    console.log(x);
  }
	return{
	inc
	}
}
let counter1 = counter();
counter1.inc();
counter1.inc();
counter1.inc();
counter1.inc();
counter1.inc();
6) let a = [1,2,3,4,5,6,7,8,9,10];
let i = 0;
function cycle(cb) {
  if (i < a.length)
  {
    cb(a[i]);
    i++;
    return cycle(cb);
  }
}
cycle((element)=>
{
  console.log(element);
});
7)argument - це псевдомасив всіх аргументів функції, 
які були в неї передані, навіть якщо їх не було при оголошенні функції.
forEach перебирає arguments.
8)Hoisting - явище коли є кілька html елементів один над одним, 
на яких висять певні івенти і при кліку на верхній елемент спрацьовують івенти, повішені на нижні елементи.
9)При описі стрілочної функції відсуутнє слово function. 
Тільки стрілочні функції можууть використовуватися в коллбеках. 
При використанні ключового слова this в стрілочній функції посилання на параметр об'єкту вилітає за межі функції.
10)Promise - це аналог коллбеків для обробки асинхронності. Має 2 стани resolved i rejected,
 що відповідно відповідають за виконання promis-а або за помилку.
11)Currying - це схоже з Hoisting явище, 
тільки при кліку на нижній елемент спрацьовують івенти всі інших елементів.
12)Ключове слово this посилається на вказаний після крапки параметр об'єкта, 
в якому знаходиться, і не залежить від зміни назви об'єкта чи функції.
В стрілочній функції this вилітає за межі об'єкта в якому знаходиться 
і посилається вже на попередній об'єкт або на window.
14)Основна перевага прототипів - це те що при створенні нових об'єктів класу не сторюється дублікатів функцій цих класів.
Це дозволяє значно зекономити час загруузки сайту і навантаженість на сервер\мережу.
15)ООП - це підхід, при якому об'єкт розглядається як певна сутність, з своїми пареметрами(полями) і методами.
Основні його принципи:
Інкаплусяція - приховування від юзера внутрішніх складових коду, тобто створення оболонки, за яку юзер не має доступу.
Наслідування - вміння дочірніх класів наслідувати певні поля і методи від батьківських класів.
Поліморфізм - зміна поведінки об'ктів і функцій залежно від параметрів що в них передаються.
class Parent{
  constructor(name,age,status) {
    this.name = name;
    this.age = age;
    this.status = status;
  }
  sayHello()
  {
    console.log(`HI I AM ${this.name}, I AM ${this.age} YEARS OLD AND I AM A ${this.status}`);
  }
}
class Child extends Parent{
  constructor(name,age,status) {
    super();
    this.name = name;
    this.age = age;
    this.status = status;
  }
}
let Father = new Parent("Adam",56,'father');
Father.sayHello();
let Son = new Child("Jacob",23,"son");
Son.sayHello();
